import math
import sympy
import numpy as np
import time
import mysql.connector
from tkinter import *
import tkinter as tk
import datetime
from matplotlib.patches import Circle
import matplotlib.pyplot as plt
import keyboard
import tkinter.font as tkfont
import sys
import myrecognition



running = False  # 執行
sysclose = False # 關閉程式
game_id = 1 # 第幾場遊戲 
myresultlist = [] # sql回傳結果
fig = plt.figure(figsize=(10,10)) # 畫出的圖形
ax = fig.gca() # 當前的軸
A=[0,0] # A點座標
B=[590,0] # B點座標
C=[0,480] # C點座標
olddata = [] # 儲存舊的座標
speed = 1 # 機器人速度
locationcount = 1 # 用來在圖上標示出第幾筆數據


# map = 590x480 /5 = 118x96
# 洋流方向符號: ←:左邊, ↑:上面, →:右邊, ↓:下面, ╮:左上, ╭:右上, ╯:左下, ╰:右下
#
# 118x96 單位=5公分
#
#            1        10        20        30        40        50        60        70        80        90        100       110     118
#            ↓        ↓         ↓         ↓         ↓         ↓         ↓         ↓         ↓         ↓         ↓         ↓       ↓
gamemap = [['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮╮↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭╭'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←.......................................→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰'],
           ['╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯╯↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰╰']]
#       (0,0)

gamemap.reverse() # 讓左下角為(0,0)


###   設定xy軸的數值   ###
def basic():
    global ax
    ax.set_xticks(np.arange(0, 590, 10)) # x軸設定
    ax.set_yticks(np.arange(0, 480, 10)) # y軸設定
    plt.xticks(fontsize=5)
    plt.yticks(fontsize=5)
    plt.grid(True)
    plt.scatter(A[0],A[1])
    plt.text(A[0],A[1],"A")
    plt.scatter(B[0],B[1])
    plt.text(B[0],B[1],"B")
    plt.scatter(C[0],C[1])
    plt.text(C[0],C[1],"C")

    

                        
###   算角度   ###    
def angle(v1, v2):
    dx1 = v1[2] - v1[0] # x差 
    dy1 = v1[3] - v1[1] # y差
    dx2 = v2[2] - v2[0] # x差
    dy2 = v2[3] - v2[1] # y差
    angle1 = math.atan2(dy1, dx1)
    angle1 = int(angle1 * 180/math.pi)

    angle2 = math.atan2(dy2, dx2)
    angle2 = int(angle2 * 180/math.pi)

    if angle1*angle2 >= 0:
        if v1[2]-v2[0] >=0:
            myangle = abs(angle1-angle2)
        elif v1[2   ]-v2[0] <0:
            myangle = 360-abs(angle1-angle2)
    else:
        myangle = abs(angle1) + abs(angle2)

    return myangle
    



# 取得game_id
def connect(sql):
    global myresultlist
    mydb = mysql.connector.connect(
      host="localhost",
      user="root",
      passwd="",
      database="test"
    )
    mycursor = mydb.cursor()
    mycursor.execute(sql) 
    myresultlist = mycursor.fetchone()
    return myresultlist
    



###   畫出x,y   ###
def draw():
            
    
    global labelflow, labelspeed, speed, labeldegree, running, d_sql, ax, locationcount, x, y
    

    if True:    
  
        basic()
        alphacount = 1 # 透明度count
 
        # 用藍色畫出前面10個座標，並用漸層區別
        for c in olddata:         

            if c == None:
                break
                        
            elif len(olddata) > 10: 
                alphacount2 = 1 # 透明度count
                for k in olddata[-10:]:
                    plt.scatter(k[0],k[1],70,"blue",alpha =0.1*alphacount2)
                    alphacount2 += 1
                break
                    
            elif len(olddata) <= 10:
                
                plt.scatter(c[0],c[1],70,"blue",alpha =0.1*alphacount)
                alphacount += 1
                #length = length + average
            
        # 紅色畫出最新座標        
        plt.scatter(x,y,30,"red",alpha = 1) 
        plt.annotate(locationcount,(x,y),xytext=(x+40,y+40), fontsize=10, arrowprops=dict(arrowstyle='->', lw = 1))

        
        # 用前一點座標和最新座標算出方位角
        if len(olddata) >=1:
            degree =  angle([olddata[-1][0],olddata[-1][1],x,y],[olddata[-1][0],0,olddata[-1][0],1])
         
        plt.show()
        locationcount +=1   
        
        # 印出方位角
        if len(olddata) >=1:
            print ("方位角:",degree)
            labeldegree.set("方位角: "+str(degree))
            
        # 洋流影響速度 40為單位
        if len(olddata) >=1:
            newx = math.floor(x/5)
            newy = math.floor(y/5)
            
            if newx >117 or newx <0 or newy >95 or newy <0:
                speed = 1
                print ("速度:",speed)
                print ("洋流方向:","."+"(無)" )
                labelflow.set("洋流方向: "+"."+"(無)")         
            elif gamemap[newy][0][newx] == "↑":
                if 0 <= degree < 20 or 340 < degree <= 360: # 加速
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 160 < degree < 200: # 減速
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(南方)" )
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(南方)")
            elif gamemap[newy][0][newx] == "←":
                if 250 < degree < 290:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 70 < degree < 110:
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(東方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(東方)")
            elif gamemap[newy][0][newx] == "↓":
                if 160 < degree < 200:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 0 <= degree < 20 or 340 < degree <= 360: 
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(北方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(北方)")
            elif gamemap[newy][0][newx] == "→":
                if 70 < degree < 110:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 250 < degree < 290:
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(西方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(西方)")
            elif gamemap[newy][0][newx] == "╭":
                if 25 < degree < 65:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 205 < degree < 245:
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(西南方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(西南方)")
            elif gamemap[newy][0][newx] == "╮":
                if 295 < degree < 335:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 115 < degree < 155:
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(東南方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(東南方)")
            elif gamemap[newy][0][newx] == "╯":
                if 205 < degree < 245:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 25 < degree < 65:
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(東北方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(東北方)")
            elif gamemap[newy][0][newx] == "╰":
                if 115 < degree < 155:
                    speed = 1.3
                    print ("速度:",speed,"(順向)")
                    labelspeed.set("速度: "+str(speed)+"(順向)")
                elif 295 < degree < 335:
                    speed = 0.6
                    print ("速度:",speed,"(逆向)")
                    labelspeed.set("速度: "+str(speed)+"(逆向)")
                else:
                    speed = 1
                    print ("速度:",speed)
                    labelspeed.set("速度: "+str(speed))
                print ("洋流方向:",gamemap[newy][0][newx]+"(西北方)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(西北方)")
            elif gamemap[newy][0][newx] == ".":
                speed = 1
                print ("速度:",speed)
                print ("洋流方向:",gamemap[newy][0][newx]+"(無)")
                labelflow.set("洋流方向: "+str(gamemap[newy][0][newx])+"(無)")
        print (x,y)
                        
        # 保存座標
        olddata.append((x,y))

        

###   連接資料庫 & 座標加入資料庫設定  ###
    
    
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="",
  database="test"
)
mycursor = mydb.cursor()
sql = "INSERT INTO rssi (game_id, X_axis, Y_axis, Z_axis, A_station, B_station, C_station) VALUES (%s, %s, %s, %s, %s, %s, %s)"
mydb.commit()




###   讀取辨識紀錄   ###

xaxis = []
yaxis = []
zaxis = []
astation = []
bstation = []
cstation = []


# 打開定位紀錄
fp = open('record.txt','a+',encoding='utf-8') 

def read():
  global firstenter, xaxis, yaxis, caxis, astation, bstation, cstation, running, x, y
  
  # 如果資料庫為空，則設定game_id為1，否則加上1
  if myresultlist == None:
      gid = "1"
      firstenter = False
      
  else:
      gid = str(int(myresultlist[0])+1)
      firstenter = False
          
  # 打開儲存座標的記事本並丟到資料庫   
  if running:

      xaxis = []
      yaxis = []
      zaxis = []
      astation = []
      bstation = []
      cstation = []
      count5 =0
      for line in fp:
         
          if 'x軸' in line:
              xaxis.append(line[-4:-1]) 
          elif 'y軸' in line:
              yaxis.append(line[-4:-1])
          elif 'z軸' in line:
              zaxis.append(line[-4:-1])
          elif 'A站' in line:
              astation.append(line[-4:-1])              
          elif 'B站' in line:
              bstation.append(line[-4:-1])              
          elif 'C站' in line:
              cstation.append(line[-4:-1])
          if count5 == 5:
              break
          count5 += 1
          
      x = int(xaxis[0])
      y = int(yaxis[0])
      
      val = (gid,xaxis[0],yaxis[0],zaxis[0],astation[0],bstation[0],cstation[0])
      mycursor.execute(sql, val)
      mydb.commit()    
      

###   開始定位   ###               
def start():
    print("開始定位")
    global running
    running = True


###   停止定位   ###   
def stop():
    print("停止定位")
    global running
    running = False


###   結束程式   ###
def close():
    global sysclose
    sysclose = True


 
###   TK介面   ###
root = Tk()
root.title("Title")
root.geometry("280x200")

app = Frame(root)
app.grid()
font1 = tkfont.Font(family="Arial", size=13, weight=tkfont.BOLD)

labeldegree = tk.StringVar()
labeldegree.set("方位角:")
label = Label(app, width=16,  textvariable=labeldegree, font=font1, anchor="w")
label.grid(row=0, column=1, padx=7)

labelspeed = tk.StringVar()
labelspeed.set("速度:")
label2 = Label(app, width=16,  textvariable=labelspeed, font=font1, anchor="w")
label2.grid(row=1, column=1, padx=7)

labelflow = tk.StringVar()
labelflow.set("洋流方向:")
label3 = Label(app, width=16,  textvariable=labelflow, font=font1, anchor="w")
label3.grid(row=2, column=1, padx=7, pady=14)

start = Button(app, width=10, height=2, text="開始定位", command=start)
stop = Button(app, width=10, height=2, text="停止定位", command=stop)
close = Button(app, width=10, height=2, text="結束程式", command=close)

start.grid(row=0, column=0, padx=7, pady=7 )
stop.grid(row=1, column=0, padx=7, pady=7)
close.grid(row=2, column=0, padx=7, pady=7)



###   抓取最後一筆座標的game_id   ###
firstenter = True
if firstenter == True:
    
    sql2 = "SELECT game_id FROM rssi ORDER BY id DESC LIMIT 1" # 抓最後一筆資料的game_id
    connect(sql2)
    
    
###   迴圈   ###
while True:
    root.update()
    if running:
        
        retry = myrecognition.recognition()
        if retry == True:
            print ("重新嘗試中")
            time.sleep(0.1)
            continue
        else:
            read()
            draw()
            time.sleep(1)
        
    if sysclose == True:
        fp.close()
        root.destroy()
        sys.exit()


        
    
